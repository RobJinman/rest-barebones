apply plugin: "war"
apply plugin: "distribution"
apply plugin: "maven-publish"
apply plugin: "com.bmuschko.cargo"
apply plugin: "com.recursiveloop.buildcommon"

ext {
  projectRoot = getProjectDir().getAbsolutePath()

  cargoVersion = "1.4.18"

  tomcat = [
    cargoId: "tomee1x",
    downloadUrl: "http://mirrors.ukfast.co.uk/sites/ftp.apache.org/tomee/tomee-1.7.4/apache-tomee-1.7.4-plus.zip",
    absInstallationRoot: "$projectRoot/containers/apache-tomee-1.7.4-plus/apache-tomee-plus-1.7.4/",
    configFile: "containerConfig/tomcat/context.xml",
    configFileDest: "conf",
    arquillianDeps: [
      "org.apache.openejb:arquillian-tomee-embedded:1.7.4",
      "org.apache.openejb:tomee-embedded:1.7.4",
      "org.apache.openejb:tomee-webservices:1.7.4",
      "org.apache.openejb:tomee-jaxrs:1.7.1"
    ]
  ]

  wildfly9 = [
    cargoId: "wildfly9x",
    downloadUrl: "http://download.jboss.org/wildfly/9.0.2.Final/wildfly-9.0.2.Final.zip",
    absInstallationRoot: "$projectRoot/build/containers/wildfly-9.0.2.Final/wildfly-9.0.2.Final/",
    configFile: "containerConfig/wildfly9/standalone.xml",
    configFileDest: "configuration",
    arquillianDeps: [
      "org.wildfly.arquillian:wildfly-arquillian-container-managed:1.0.2.Final"
    ]
  ]

  wildfly10 = [
    cargoId: "wildfly10x",
    downloadUrl: "http://download.jboss.org/wildfly/10.0.0.Final/wildfly-10.0.0.Final.zip",
    absInstallationRoot: "$projectRoot/build/containers/wildfly-10.0.0.Final/wildfly-10.0.0.Final/",
    configFile: "containerConfig/wildfly10/standalone.xml",
    configFileDest: "configuration",
    arquillianDeps: [
      "org.wildfly.arquillian:wildfly-arquillian-container-managed:1.0.2.Final"
    ]
  ]

  glassfish = [
    cargoId: "glassfish4x",
    downloadUrl: "http://download.java.net/glassfish/4.1.1/release/glassfish-4.1.1.zip",
    absInstallationRoot: "$projectRoot/build/containers/glassfish-4.1.1/glassfish4/",
//    configFile: "containerConfig/glassfish/domain.xml",
    configFileDest: "cargo-domain/config",
    arquillianDeps: [
      "org.jboss.arquillian.container:arquillian-glassfish-managed-3.1:1.0.0.CR3"
    ]
  ]

  containerConfig = glassfish

  artifactBaseName = "webcommon"
  artifactorySnapshotRepoUrl = "$artifactoryBaseUrl/libs-snapshot-local"
  artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"
}

buildscript {
  def buildcommonVersion = "0.1-SNAPSHOT"
  def cargoPluginVersion = "2.2.1"
  def artifactorySnapshotRepoUrl = "$artifactoryBaseUrl/libs-snapshot-local"
  def artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"

  repositories {
    jcenter()
    mavenCentral()
    maven {
      name "artifactorySnapshot"
      url artifactorySnapshotRepoUrl
    }
    maven {
      name "artifactoryRelease"
      url artifactoryReleaseRepoUrl
    }
  }

  dependencies {
    classpath "com.bmuschko:gradle-cargo-plugin:$cargoPluginVersion"
    classpath "com.recursiveloop.gradle:buildcommon:$buildcommonVersion"
  }
}

repositories {
  jcenter()
  mavenCentral()
  maven {
    name "arquillian"
    url "http://repository.jboss.org/nexus/content/groups/public"
  }
  maven {
    name "artifactorySnapshot"
    url artifactorySnapshotRepoUrl
  }
  maven {
    name "artifactoryRelease"
    url artifactoryReleaseRepoUrl
  }
}

sourceSets {
  integrationTest {
    java {
      srcDir "src/integrationTest/java"

      compileClasspath += main.output
      runtimeClasspath += main.output
    }

    resources {
      srcDir "src/integrationTest/resources"
    }
  }

  webcommon {
    java {
      srcDir "src/main/java"
      exclude "com/recursiveloop/webcommondemo/**"

      compileClasspath += main.output
    }
  }
}

configurations {
  all {
    transitive = true
  }

  [compile, runtime, providedRuntime]*.resolutionStrategy {
    failOnVersionConflict()

    force "com.fasterxml.jackson.core:jackson-annotations:2.+",
      "xml-apis:xml-apis:1.+",
      "org.hamcrest:hamcrest-core:1.+"
  }

  testRuntime {
    resolutionStrategy {
      force "org.apache.felix:org.apache.felix.resolver:1.+"
    }
  }

  jdbcDriver

  webcommonCompile.extendsFrom compile

  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime, integrationTestCompile
}

dependencies {
  jdbcDriver files("lib/postgresql-9.4.1208.jar")

  runtime "com.recursiveloop:corsfilter:1.0.+"

  providedCompile "javax:javaee-api:7.0"

  testCompile "org.mockito:mockito-core:1.10.19",
    "junit:junit:4.11"

  integrationTestCompile "org.jboss.arquillian.junit:arquillian-junit-container:1.1.11.Final",
    "org.jboss.arquillian.protocol:arquillian-protocol-servlet:1.1.11.Final",
    "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:2.2.2",
    "org.jboss.arquillian.extension:arquillian-rest-client-impl-3x:1.0.0.Alpha3",
    "org.jboss.arquillian.protocol:arquillian-protocol-servlet:1.1.7.Final",
    "org.jboss.resteasy:resteasy-jackson-provider:3.0.10.Final",
    "org.mockito:mockito-core:1.10.19",
    "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:2.1.1"
  integrationTestCompile containerConfig.arquillianDeps

  cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
    "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

versions {
  versionFile = file("version.properties")
}

cargo {
  containerId = containerConfig.cargoId
  port = 9090

  deployable {
    context = "/"
  }

  local {
    outputFile = file("build/output.log")
    logFile = file("build/log.log")
    logLevel = "high"
    timeout = 240000

    if (containerConfig.configFile) {
      configFile {
        file = file(containerConfig.configFile)
        toDir = containerConfig.configFileDest
      }
    }
    else {
      containerProperties {
        property "cargo.datasource.datasource1",
          "cargo.datasource.url=jdbc:postgresql://localhost:5432/maindb|" +
          "cargo.datasource.driver=org.postgresql.Driver|" +
          "cargo.datasource.jndi=jdbc/maindb|" +
          "cargo.datasource.username=rlwebapp|" +
          "cargo.datasource.password=password"

        property "cargo.datasource.datasource2",
          "cargo.datasource.url=jdbc:postgresql://localhost:5432/testdb|" +
          "cargo.datasource.driver=org.postgresql.Driver|" +
          "cargo.datasource.jndi=jdbc/testdb|" +
          "cargo.datasource.username=rlwebapp|" +
          "cargo.datasource.password=password"

        property "cargo.resource.resource1",
          "cargo.resource.name=java:global/configTable|" +
          "cargo.resource.type=java.lang.CharSequence|"
          "cargo.resource.class=java.lang.String|" +
          "cargo.resource.parameters=java:comp/env/jdbc/maindb"

        property "cargo.resource.resource2",
          "cargo.resource.name=java:global/configDatabase|" +
          "cargo.resource.type=java.lang.CharSequence|"
          "cargo.resource.class=java.lang.String|" +
          "cargo.resource.parameters=rl.config"

        property "cargo.resource.resource3",
          "cargo.resource.name=java:global/configKeyColumn|" +
          "cargo.resource.type=java.lang.CharSequence|"
          "cargo.resource.class=java.lang.String|" +
          "cargo.resource.parameters=key"

        property "cargo.resource.resource4",
          "cargo.resource.name=java:global/configValueColumn|" +
          "cargo.resource.type=java.lang.CharSequence|"
          "cargo.resource.class=java.lang.String|" +
          "cargo.resource.parameters=value"
      }
    }

    extraClasspath = files("lib/postgresql-9.4.1208.jar") // TODO

    installer {
      installUrl = containerConfig.downloadUrl
      downloadDir = file("$buildDir/download")
      extractDir = file("$buildDir/containers")
    }

    systemProperties {
      property "app.name", "webcommondemo"
      property "app.logs", "$projectRoot/build/logs"
    }
  }
}

war {
  from("src/resources") {
    into "WEB-INF/classes"
    include "*"
  }

  exclude("**/scss")

  archiveName "ROOT.war"
}

test {
  testLogging {
    exceptionFormat = "full"
    showStandardStreams = true
  }

  reports {
    html.destination = "$buildDir/reports/unit"
    junitXml.destination = "$buildDir/test-results/unit"
  }

  if (project.hasProperty("debug")) {
    def port = project.hasProperty("debugPort") ? project.debugPort : 8787
    jvmArgs = "-Xdebug -Xmx512m -XX:MaxPermSize=128m -Xrunjdwp:transport=dt_socket,address=$port" +
      ",server=y,suspend=y".tokenize(" ")
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.6"
}

task sourcesJar(type: Jar) {
  baseName artifactBaseName
  classifier "sources"
  from sourceSets.webcommon.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName artifactBaseName
  classifier "doc"
  from javadoc.destinationDir
}

task buildWebcommon(type: Jar) {
  baseName artifactBaseName
  from sourceSets.webcommon.output

  metaInf {
    from "src/main/java/META-INF"
    include "**"
  }
}

task integrationTestSetup(group: "Integration Test") << {
  URLClassLoader loader = GroovyObject.class.classLoader
  configurations.jdbcDriver.each {File file ->
    loader.addURL(file.toURL())
  }

  def driverName = "org.postgresql.Driver"
  groovy.sql.Sql sql = groovy.sql.Sql.newInstance("jdbc:postgresql://localhost:5432/testdb",
    "rlwebapp", "password", driverName)

  sql.execute("DELETE FROM rl.config;")
  sql.execute("INSERT INTO rl.config (key, value) VALUES " +
    "('param1', 'This is param1 from the database');")
  sql.execute("INSERT INTO rl.config (key, value) VALUES " +
    "('param3', 'This is param3 from the database');")
  sql.execute("INSERT INTO rl.config (key, value) VALUES " +
    "('com.recursiveloop.webcommon.ConfigFactoryTest.param6', " +
    "'This is param6 from the database');")
  sql.execute("INSERT INTO rl.config (key, value) VALUES ('ConfigFactoryTest.param7', " +
    "'This is param7 from the database');")
}

task integrationTestTearDown(group: "Integration Test") << {
  def driverName = "org.postgresql.Driver"
  groovy.sql.Sql sql = groovy.sql.Sql.newInstance("jdbc:postgresql://localhost:5432/testdb",
    "rlwebapp", "password", driverName)

  sql.execute("DELETE FROM rl.config;")
}

task integrationTest(type: Test, group: "Integration Test") {
  description = "Run integration tests."

  outputs.upToDateWhen { false }

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath

  def jvmArgs = ""
  if (project.hasProperty("debug")) {
    def port = project.hasProperty("debugPort") ? project.debugPort : 8787
    jvmArgs = "-Xdebug -Xmx512m -XX:MaxPermSize=128m -Xrunjdwp:transport=dt_socket,address=" +
      "$port,server=y,suspend=y"
  }
  else {
    jvmArgs = "-DDummy"
  }

  systemProperty "project.baseDir", projectRoot
  systemProperty "project.jvmArgs", jvmArgs
  systemProperty "project.containerHome", containerConfig.absInstallationRoot
  systemProperty "project.deploymentExportPath", "$projectRoot/build/integrationTestDeployments/"

  testLogging {
    exceptionFormat = "full"
    showStandardStreams = true
  }

  reports {
    html.destination = "$buildDir/reports/integration"
    junitXml.destination = "$buildDir/test-results/integration"
  }
}

integrationTest.dependsOn integrationTestSetup
integrationTest.finalizedBy integrationTestTearDown

cargoRunLocal.dependsOn assemble
assemble.dependsOn buildWebcommon

artifacts {
  archives buildWebcommon
  archives sourcesJar
  archives javadocJar
}

distributions {
  main {
    baseName = artifactBaseName

    contents {
      from { libsDir }
    }
  }
}

publishing {
  publications {
    webcommon(MavenPublication) {
      from components.java
      artifactId "webcommon"

      artifact sourcesJar
      artifact javadocJar
    }
  }

  repositories {
    maven {
      name "artifactory"
      url project.version.toString().endsWith("-SNAPSHOT") ?
        artifactorySnapshotRepoUrl : artifactoryReleaseRepoUrl

      credentials {
        username = artifactoryUsername
        password = artifactoryPassword
      }
    }
  }
}
