import com.recursiveloop.gradle.tasks.*

apply plugin: "war"
apply plugin: "com.bmuschko.cargo"
apply plugin: com.recursiveloop.gradle.MyPlugin

version = '0.0.1'

def projectRoot = getProjectDir().getAbsolutePath()
def servletSpec = "3.0.1"

ext.testVersions = [
  javaee                  : '7.0',
  wildfly                 : '8.1.0.Final',
  junit                   : '4.11',
  arquillian              : '1.1.5.Final',
  shrinkWrapResolverGradle: '2.2.0-beta-1'
]

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "com.bmuschko:gradle-cargo-plugin:2.0.3"
  }
}

repositories {
  jcenter()
  mavenCentral()

  maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
  maven { url 'http://repository.jboss.org/nexus/content/repositories/deprecated' }
  maven { url 'http://repo.jfrog.org/artifactory/repo' }

  flatDir {
    dirs(libs.split(","))
  }
}

sourceSets {
  integrationTest {
    java {
      srcDir "src/integrationTest/java"

      compileClasspath += main.output
      runtimeClasspath += main.output
    }

    resources {
      srcDir "src/integrationTest/resources"
    }
  }

  webcommon {
    java {
      srcDir "src/main/java"
      exclude "com/recursiveloop/webcommondemo/**"

      compileClasspath += main.output
    }
  }
}

configurations {
  all {
    transitive = true
  }

  [compile, runtime, providedRuntime]*.resolutionStrategy {
    failOnVersionConflict()

    force "com.fasterxml.jackson.core:jackson-annotations:2.+",
      "xml-apis:xml-apis:1.+",
      "org.hamcrest:hamcrest-core:1.+"
  }

  testRuntime {
    resolutionStrategy {
      force "org.apache.felix:org.apache.felix.resolver:1.+"
    }
  }

  jdbcDriver

  runtime.extendsFrom jdbcDriver

  webcommonCompile.extendsFrom compile

  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime, integrationTestCompile
}

dependencies {
  jdbcDriver files("lib/postgresql-9.3-1101.jdbc41.jar")

  runtime name: "corsFilter"

  providedCompile "javax:javaee-api:7.0"

  testCompile "org.mockito:mockito-core:1.10.19",
    "junit:junit:${testVersions.junit}"

  integrationTestCompile "org.jboss.arquillian.junit:arquillian-junit-container:${testVersions.arquillian}",
    "org.jboss.arquillian.protocol:arquillian-protocol-servlet:${testVersions.arquillian}",
    "org.wildfly:wildfly-arquillian-container-managed:${testVersions.wildfly}",
    "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:${testVersions.shrinkWrapResolverGradle}",
    "org.jboss.arquillian.extension:arquillian-rest-client-impl-3x:1.0.0.Alpha3",
    "org.jboss.arquillian.protocol:arquillian-protocol-servlet:1.1.7.Final",
    "org.jboss.resteasy:resteasy-jackson-provider:3.0.10.Final",
    "org.mockito:mockito-core:1.10.19",
    "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:2.1.1"

  def cargoVersion = "1.4.12"
  cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
    "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

cargo {
  containerId = "wildfly8x"
  port = 9090

  deployable {
    context = ""
  }

  local {
    outputFile = file("build/output.log")
    logLevel = "high"
    timeout = 120000

    installer {
      installUrl = "http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip"
      downloadDir = file("$buildDir/download")
      extractDir = file("containers")
    }

    systemProperties {
      property "app.name", "rest-barebones"
      property "app.logs", "$projectRoot/build/logs"
    }
  }
}

war {
  from("src/resources") {
    into "WEB-INF/classes"
    include "*"
  }

  exclude("**/scss")

  archiveName "ROOT.war"
}

test {
  testLogging {
    exceptionFormat = "full"
    showStandardStreams = true
  }

  reports {
    html.destination = "$buildDir/reports/unit"
    junitXml.destination = "$buildDir/test-results/unit"
  }

  if (project.hasProperty("debug")) {
    def port = project.hasProperty("debugPort") ? project.debugPort : 8787
    jvmArgs = "-Xdebug -Xmx512m -XX:MaxPermSize=128m -Xrunjdwp:transport=dt_socket,address=$port,server=y,suspend=y".tokenize(" ")
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.6'
}

task buildWebcommon(type: Jar) {
  from sourceSets.webcommon.output

  metaInf {
    from "src/main/java/META-INF"
    include "**"
  }
}

task integrationTest(type: Test) {
  doFirst {
    URLClassLoader loader = GroovyObject.class.classLoader
    configurations.jdbcDriver.each {File file ->
      loader.addURL(file.toURL())
    }

    def driverName = 'org.postgresql.Driver'
    groovy.sql.Sql sql = groovy.sql.Sql.newInstance('jdbc:postgresql://localhost:5432/testdb', 'rlwebapp', 'password', driverName)

    sql.execute("DELETE FROM rl.config;")
    sql.execute("INSERT INTO rl.config (key, value) VALUES ('param1', 'This is param1 from the database');")
    sql.execute("INSERT INTO rl.config (key, value) VALUES ('param3', 'This is param3 from the database');")
    sql.execute("INSERT INTO rl.config (key, value) VALUES ('com.recursiveloop.webcommon.ConfigFactoryTest.param6', 'This is param6 from the database');")
    sql.execute("INSERT INTO rl.config (key, value) VALUES ('ConfigFactoryTest.param7', 'This is param7 from the database');")
  }

  doLast {
    def driverName = 'org.postgresql.Driver'
    groovy.sql.Sql sql = groovy.sql.Sql.newInstance('jdbc:postgresql://localhost:5432/testdb', 'rlwebapp', 'password', driverName)

    sql.execute("DELETE FROM rl.config;")
  }

  description = "Run integration tests."

  outputs.upToDateWhen { false }

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath

  def jvmArgs = ""
  if (project.hasProperty("debug")) {
    def port = project.hasProperty("debugPort") ? project.debugPort : 8787
    jvmArgs = "-Xdebug -Xmx512m -XX:MaxPermSize=128m -Xrunjdwp:transport=dt_socket,address=$port,server=y,suspend=y"
  }
  else {
    jvmArgs = "-DDummy"
  }

  systemProperty "project.baseDir", projectRoot
  systemProperty "project.jvmArgs", jvmArgs

  testLogging {
//    exceptionFormat = "full"
//    showStandardStreams = true
  }

  reports {
    html.destination = "$buildDir/reports/integration"
    junitXml.destination = "$buildDir/test-results/integration"
  }
}

cargoRunLocal.dependsOn assemble
assemble.dependsOn buildWebcommon

artifacts {
  webcommonCompile buildWebcommon
}
